// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length;
    field Array array;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        if (maxLength > 0) {
            let array = Array.new(maxLength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Array.dispose(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return array[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let array[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let array[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean shouldContinue, shouldNegate;
        var int index, result;
        var char c;
        let shouldContinue = true;
        let shouldNegate = false;
        let index = 0;
        let result = 0;

        // handling minus sign
        if (length > 0 & charAt(0) = 45) {
            let shouldNegate = true;
            let index = index + 1;
            let shouldContinue = index < length;
        }

        while (shouldContinue) {
            let c = charAt(index);
            if ((c > 47) & (c < 58)) {
                let result = (10 * result) + (c - 48);
                let index = index + 1;
                let shouldContinue = index < length;
            } else {
                let shouldContinue = false;
            }
        }
        if (shouldNegate) {
            let result = -result;
        }
        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        if (val < 0) {
            do appendChar(45); // adding minus sign
            do _recSetInt(-val);
        }
        else {
            do _recSetInt(val);
        }
        return;
    }

    method void _recSetInt(int val) {
        var int r;
        if (val > 9) {
            do _recSetInt(val / 10);
        }
        let r = val - (10 * (val / 10)); // val % 10
        do appendChar(r + 48);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
