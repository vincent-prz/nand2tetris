// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static int memoryMapAddress;
    /** Initializes the keyboard. */
    function void init() {
        let memoryMapAddress = 24576;
        let memoryMapAddress[0] = 0;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return memoryMapAddress[0];
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char keyPressed;
        let keyPressed = 0;
        while (keyPressed = 0) {
            let keyPressed = Keyboard.keyPressed();
        }
        while (~(Keyboard.keyPressed() = 0)) {
            // waiting for key release
        }
        if (~(keyPressed = String.backSpace()) & ~(keyPressed = String.newLine())) {
            do Output.printChar(keyPressed);
        }
        return keyPressed;
    }

    /**
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var char c;
        var String result;
        let result = String.new(32); // FIXME: rigid max length;
        do Output.printString(message);
        let c = Keyboard.readChar();

        while (~(c = String.newLine())) {
            if ((c = String.backSpace()) & (result.length() > 0)) {
                do result.eraseLastChar();
                do Output.backSpace();
            } else {
                do result.appendChar(c);
            }
            let c = Keyboard.readChar();
        }
        do Output.println();
        return result;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var char c;
        var String str;
        var int result;
        let str = String.new(6); // NOTE: a 16 bit int car at most have 5 digits
        do Output.printString(message);
        let c = Keyboard.readChar();
        // NOTE c = 45 -> minus sign
        while (Keyboard._isDigit(c) | (c = String.backSpace()) | (c = 45)) {
            if ((c = String.backSpace()) & (str.length() > 0)) {
                do str.eraseLastChar();
                do Output.backSpace();
            } else {
                do str.appendChar(c);
            }
            let c = Keyboard.readChar();
        }
        let result = str.intValue();
        do str.dispose();
        return result;
    }

    function boolean _isDigit(char c) {
        return c > 47 & c < 58;
    }
}
